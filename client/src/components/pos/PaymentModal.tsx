import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle
} from "@/components/ui/dialog";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger
} from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { ChevronRight, CreditCard, SmartphoneIcon, Building2, RefreshCcw, Banknote } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from '@/lib/queryClient';
import CardDetailsForm from '@/components/payments/CardDetailsForm';
import MBWayForm from '@/components/payments/MBWayForm';
import { paymentMethodEnum } from '@shared/schema';
type PaymentMethod = typeof paymentMethodEnum.enumValues[number];

interface PaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onPaymentSuccess: (paymentId: number) => void;
  totalAmount: number;
  reservationId?: number;
  userId: number;
}

export default function PaymentModal({
  isOpen,
  onClose,
  onPaymentSuccess,
  totalAmount,
  reservationId,
  userId
}: PaymentModalProps) {
  const { toast } = useToast();
  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod>("card");
  const [isProcessing, setIsProcessing] = useState(false);
  const [phoneNumber, setPhoneNumber] = useState("");
  const [cardDetails, setCardDetails] = useState({
    cardNumber: "",
    cardholderName: "",
    expiryDate: "",
    cvv: ""
  });
  
  const handlePaymentSubmit = async () => {
    setIsProcessing(true);
    
    try {
      const paymentData = {
        amount: totalAmount,
        method: paymentMethod,
        userId,
        reservationId,
        details: getPaymentDetails()
      };
      
      const response = await apiRequest("POST", "/api/payments", paymentData);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Erro ao processar pagamento");
      }
      
      const data = await response.json();
      
      if (paymentMethod === "multibanco" || paymentMethod === "mbway") {
        handleRedirectPayment(data);
      } else {
        // Handle direct success for cash or card payment in POS
        toast({
          title: "Pagamento processado com sucesso",
          description: `Pagamento com ${getPaymentMethodLabel(paymentMethod)} registrado.`,
          variant: "default",
        });
        
        onPaymentSuccess(data.id);
        onClose();
      }
    } catch (error) {
      console.error("Erro ao processar pagamento:", error);
      toast({
        title: "Erro no pagamento",
        description: error instanceof Error ? error.message : "Ocorreu um erro ao processar o pagamento",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };
  
  const getPaymentDetails = () => {
    switch (paymentMethod) {
      case "card":
        return cardDetails;
      case "mbway":
        return { mbwayAlias: phoneNumber };
      case "multibanco":
        return {}; // Reference and entity generated by backend
      case "bankTransfer":
        return {}; // IBAN generated by backend
      case "cash":
        return { status: "completed" }; // Cash payments are immediately completed
      default:
        return {};
    }
  };
  
  const handleCardDetailsChange = (details: {
    cardNumber: string;
    cardholderName: string;
    expiryDate: string;
    cvv: string;
  }) => {
    setCardDetails(details);
  };
  
  const handleRedirectPayment = (data: any) => {
    if (paymentMethod === "card" && data.details?.paymentUrl) {
      window.open(data.details.paymentUrl, "_blank");
    }
    
    toast({
      title: "Pagamento iniciado",
      description: getPaymentStatusMessage(paymentMethod, data),
      variant: "default",
    });
    
    onPaymentSuccess(data.id);
    onClose();
  };
  
  const getPaymentStatusMessage = (method: PaymentMethod, data: any) => {
    switch (method) {
      case "multibanco":
        return `Pagamento Multibanco gerado. Entidade: ${data.details?.entity}, Referência: ${data.details?.reference}`;
      case "mbway":
        return `Pagamento MBWay enviado para o número ${data.details?.mbwayAlias}. Verifique o seu telefone.`;
      case "card":
        return "Redirecionando para a página de pagamento com cartão.";
      case "bankTransfer":
        return `Transferência bancária: ${data.details?.iban}, Banco: ${data.details?.bankName}`;
      case "cash":
        return "Pagamento em dinheiro registrado com sucesso.";
      default:
        return "Pagamento iniciado com sucesso.";
    }
  };
  
  const getPaymentMethodLabel = (method: PaymentMethod) => {
    switch (method) {
      case "card": return "Cartão";
      case "mbway": return "MBWay";
      case "multibanco": return "Multibanco";
      case "bankTransfer": return "Transferência";
      case "cash": return "Dinheiro";
      default: return method;
    }
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-[550px]">
        <DialogHeader>
          <DialogTitle>Pagamento - {(totalAmount / 100).toFixed(2)}€</DialogTitle>
          <DialogDescription>
            Selecione o método de pagamento desejado
          </DialogDescription>
        </DialogHeader>
        
        <Tabs defaultValue="card" onValueChange={(value: PaymentMethod) => setPaymentMethod(value)}>
          <TabsList className="grid grid-cols-5 mb-6">
            <TabsTrigger value="card" className="flex flex-col items-center gap-1 p-2">
              <CreditCard className="h-5 w-5" />
              <span className="text-xs">Cartão</span>
            </TabsTrigger>
            <TabsTrigger value="mbway" className="flex flex-col items-center gap-1 p-2">
              <SmartphoneIcon className="h-5 w-5" />
              <span className="text-xs">MBWay</span>
            </TabsTrigger>
            <TabsTrigger value="multibanco" className="flex flex-col items-center gap-1 p-2">
              <RefreshCcw className="h-5 w-5" />
              <span className="text-xs">Multibanco</span>
            </TabsTrigger>
            <TabsTrigger value="bankTransfer" className="flex flex-col items-center gap-1 p-2">
              <Bank className="h-5 w-5" />
              <span className="text-xs">Transferência</span>
            </TabsTrigger>
            <TabsTrigger value="cash" className="flex flex-col items-center gap-1 p-2">
              <Banknote className="h-5 w-5" />
              <span className="text-xs">Dinheiro</span>
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="mbway" className="space-y-4">
            <MBWayForm phoneNumber={phoneNumber} setPhoneNumber={setPhoneNumber} />
          </TabsContent>
          
          <TabsContent value="card" className="space-y-4">
            <CardDetailsForm onChange={handleCardDetailsChange} cardDetails={cardDetails} />
          </TabsContent>
          
          <TabsContent value="multibanco" className="space-y-4">
            <div className="bg-blue-50 p-4 rounded-md">
              <p className="text-sm">
                Será gerada uma referência Multibanco para efetuar o pagamento.
                Após confirmação, poderá visualizar os detalhes no seu perfil.
              </p>
            </div>
          </TabsContent>
          
          <TabsContent value="bankTransfer" className="space-y-4">
            <div className="bg-blue-50 p-4 rounded-md">
              <p className="text-sm">
                Serão fornecidos os dados bancários para realizar a transferência.
                O pagamento será confirmado após verificação da transferência.
              </p>
            </div>
          </TabsContent>
          
          <TabsContent value="cash" className="space-y-4">
            <div className="bg-green-50 p-4 rounded-md">
              <p className="text-sm">
                Pagamento em dinheiro será registrado como concluído.
                Esta opção só está disponível para pagamentos presenciais.
              </p>
            </div>
          </TabsContent>
        </Tabs>
        
        <div className="flex justify-end gap-4 mt-4">
          <Button variant="outline" onClick={onClose} disabled={isProcessing}>
            Cancelar
          </Button>
          <Button 
            onClick={handlePaymentSubmit} 
            disabled={isProcessing || (paymentMethod === "mbway" && !phoneNumber)}
            className="gap-2"
          >
            {isProcessing ? "Processando..." : "Confirmar Pagamento"}
            {!isProcessing && <ChevronRight className="h-4 w-4" />}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}