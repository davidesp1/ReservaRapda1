Vamos por passos

1) Configure as “Secrets”

* EUPAGO_BASE_URL:
    * Desenvolvimento (sandbox): https://sandbox.eupago.pt/api 
* EUPAGO_API_KEY: sua chave gerada no Backoffice Eupago (Canais → Listagem de Canais) 
2) src/integrations/eupago/client.ts

import axios from 'axios';

export const eupago = axios.create({
  baseURL: process.env.EUPAGO_BASE_URL!,       // Replit Secret
  headers: {
    'Content-Type': 'application/json',
    'ApiKey': process.env.EUPAGO_API_KEY!      // Replit Secret
  }
});

eupago.interceptors.response.use(
  res => res.data,
  err => Promise.reject(err.response?.data || err)
);

3) src/integrations/eupago/payments.ts

import { eupago } from './client';

export async function criarMultibanco(orderId: string, amount: number) {
  return eupago.post('/multibanco', {
    id:    orderId,
    valor: amount.toFixed(2)
  });
}

export async function criarMbway(orderId: string, amount: number, telefone: string) {
  return eupago.post('/mbway', {
    id:       orderId,
    valor:    amount.toFixed(2),
    telefone  // ex: "912345678"
  });
}

export async function criarCartao(data: {
  id: string;
  valor: number;
  cartao_numero: string;
  cartao_validade: string;
  cartao_cvc: string;
}) {
  return eupago.post('/credit_card', {
    id:               data.id,
    valor:            data.valor.toFixed(2),
    cartao_numero:    data.cartao_numero,
    cartao_validade:  data.cartao_validade,
    cartao_cvc:       data.cartao_cvc
  });
}

4) src/pages/api/pagamentos.ts (Next.js API Route)

import type { NextApiRequest, NextApiResponse } from 'next';
import * as payments from '@/integrations/eupago/payments';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { metodo, orderId, amount, telefone, card } = req.body;
    let result;

    switch (metodo) {
      case 'multibanco':
        result = await payments.criarMultibanco(orderId, amount);
        break;
      case 'mbway':
        result = await payments.criarMbway(orderId, amount, telefone);
        break;
      case 'cartao':
        result = await payments.criarCartao({
          id:              orderId,
          valor:           amount,
          cartao_numero:   card.numero,
          cartao_validade: card.validade,
          cartao_cvc:      card.cvc
        });
        break;
      default:
        return res.status(400).json({ error: 'Método de pagamento inválido' });
    }

    return res.status(200).json(result);
  } catch (error: any) {
    console.error('Erro Eupago:', error);
    return res.status(500).json({ error });
  }
}

5) Exemplo de consumo no Front-end

async function pagarEupago(
  metodo: 'multibanco' | 'mbway' | 'cartao',
  orderId: string,
  amount: number,
  extras?: {
    telefone?: string;
    card?: { numero: string; validade: string; cvc: string }
  }
) {
  const res = await fetch('/api/pagamentos', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ metodo, orderId, amount, ...extras })
  });

  const data = await res.json();
  if (!res.ok) throw new Error(data.error || 'Falha no pagamento');
  return data;
}

// → Multibanco
pagarEupago('multibanco', 'pedido123', 20.00)
  .then(console.log)
  .catch(console.error);

// → MB WAY
pagarEupago('mbway', 'pedido123', 15.50, { telefone: '912345678' })
  .then(console.log)
  .catch(console.error);

// → Cartão
pagarEupago('cartao', 'pedido123', 50.00, {
  card: { numero: '4976000000003436', validade: '12/25', cvc: '123' }
})
  .then(console.log)
  .catch(console.error);

6) Notas Finais
* Em desenvolvimento, use https://sandbox.eupago.pt/api. 
* Nunca exponha sua EUPAGO_API_KEY no código cliente. 
* Teste método no sandbox. 
* Trate erros de rede e API, e registre logs de falhas para auditoria.