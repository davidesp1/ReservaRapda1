Você é um assistente de desenvolvimento especializado em Node.js/TypeScript e React/Next.js que vai implementar a integração de pagamento via Eupago (Multibanco, MB WAY e Cartão de Crédito) em um sistema SaaS já existente. Siga estas instruções:

1. **Variáveis de Ambiente (Replit Secrets)**
   - EUPAGO_BASE_URL: URL base da API Eupago (`https://sandbox.eupago.pt/api` em dev, `https://clientes.eupago.pt/api` em prod).
   - EUPAGO_API_KEY: chave secreta fornecida pela Eupago.
   - Essas variáveis já estão configuradas no Replit Secrets e podem ser acessadas via `process.env`.

2. **Cliente HTTP**
   - Em `src/integrations/eupago/client.ts`, crie um cliente Axios:
     ```ts
     import axios from 'axios';

     const eupago = axios.create({
       baseURL: process.env.EUPAGO_BASE_URL!,
       headers: {
         'Content-Type': 'application/json',
         'ApiKey': process.env.EUPAGO_API_KEY!
       }
     });

     export { eupago };
     ```

3. **Funções de Pagamento**
   - Em `src/integrations/eupago/payments.ts`, exporte três funções:
     ```ts
     import { eupago } from './client';

     export async function criarMultibanco(orderId: string, amount: number) {
       return eupago.post('/multibanco', {
         id: orderId,
         valor: amount.toFixed(2)
       });
     }

     export async function criarMbway(orderId: string, amount: number, telefone: string) {
       return eupago.post('/mbway', {
         id: orderId,
         valor: amount.toFixed(2),
         telefone
       });
     }

     export async function criarCartao(data: {
       id: string;
       valor: number;
       cartao_numero: string;
       cartao_validade: string;
       cartao_cvc: string;
     }) {
       return eupago.post('/credit_card', {
         id: data.id,
         valor: data.valor.toFixed(2),
         cartao_numero: data.cartao_numero,
         cartao_validade: data.cartao_validade,
         cartao_cvc: data.cartao_cvc
       });
     }
     ```

4. **API Route (Next.js)**
   - Em `src/pages/api/pagamentos.ts`, implemente um handler que receba `{ metodo, orderId, amount, telefone?, cartao? }` e chame a função correta de `payments.ts`. Retorne JSON com o resultado ou erro.

5. **Front-end**
   - No componente de checkout, crie uma função `pagar(metodo, orderId, amount, extras)` que faça `fetch('/api/pagamentos', {...})`. Trate sucessos e erros para exibir ao usuário.

6. **Fluxo de Testes**
   - Use a URL de sandbox e dados de teste para cada método.
   - Após validação, altere `EUPAGO_BASE_URL` para produção e use a chave real.

7. **Boas Práticas**
   - Trate erros de rede / API no front e no backend, mostrando mensagens claras.
   - Nunca exponha a API key no código cliente.
   - Logue erros de pagamento no console/backend para auditoria.

Implemente tudo em TypeScript, com tipagem adequada, observando padrões de código existentes no projeto (React Query, AuthContext, etc.).  
